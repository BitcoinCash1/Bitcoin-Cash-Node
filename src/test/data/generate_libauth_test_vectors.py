#!/usr/bin/env python3
# Copyright (c) 2024 The Bitcoin developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

import json
import os
import re
import sys


def main():
    """
    Output structure
    [                             <packs_vector>
      { "name": pack_name         <pack>
        "type": test_type         <test_type> (either: "feature" or "other")
        "tests" : [               <pack_tests>
          { "name": test_name,    <pack_test>
            "reasons": reasons,
            "tests": [
              test_vector1,
              test_vector2,
            ]
          }
        ]
      }
    ]
    """
    encode = False
    header_only = False
    vector_files = sys.argv[1:]
    packs_vector = []
    for vec_file in vector_files:
        if vec_file == "--encode":
            encode = True
            continue
        if vec_file == '--header-only':
            assert encode, "--header-only may only be used with --encode"
            header_only = True
            continue
        assert os.path.isfile(vec_file)
        with open(vec_file, "rt", encoding="utf8") as f:
            contents = f.read()
            json_cont = json.loads(contents)
            m = re.match(r'.*bch_vmb_tests_(before_)?(chip_)?([^_]*)_([\w]*)\.json', vec_file)
            assert m
            active = m[1] != 'before_'
            test_type = 'feature' if m[2] == 'chip_' else 'other'  # Maybe add more logic here later
            pack_name = m[3]
            standardness = m[4].split("_")[0]
            reasons = m[4].endswith("_reasons")
            scriptonly = m[4].endswith("_scriptonly")
            if reasons:
                map_key = "reasons"
            elif scriptonly:
                map_key = "scriptonly"
            else:
                map_key = "tests"
            test_name = standardness
            if not active:
                test_name = "preactivation_" + test_name

            # Get/set pack_tests vector within packs_vector
            pack_tests = None
            for pack in packs_vector:
                if pack["name"] == pack_name:
                    pack_tests = pack["tests"]
                    break
            else:
                pack_tests = []
                packs_vector.append({"name": pack_name, "type": test_type, "tests": pack_tests})
            assert pack_tests is not None

            # Update or create the named test within pack_test, and set the "reasons" or "tests" content
            for pack_test in pack_tests:
                if pack_test["name"] == test_name:
                    pack_test[map_key] = json_cont
                    break
            else:
                pack_tests.append({"name": test_name,
                                   "reasons": json_cont if map_key == "reasons" else {},
                                   "tests": json_cont if map_key == "tests" else [],
                                   "scriptonly": json_cont if map_key == "scriptonly" else []})

    if encode:
        json_bytes = json.dumps(packs_vector).encode(encoding="utf8")
        print("// This file is auto-generated by " + sys.argv[0])
        print("#include <array>")
        print("#include <cstdint>\n")
        print("namespace json_tests {")
        # Note: Even in non-header-only mode this should appear in the .cpp file to ensure compiler emits the symbol
        print("extern const std::array<const uint8_t, " + str(len(json_bytes)) + "> libauth_test_vectors;")
        if not header_only:
            print("const std::array<const uint8_t, " + str(len(json_bytes)) + "> libauth_test_vectors = {")

            ctr = 0

            def formatter(bb: int) -> str:
                nonlocal ctr
                ret = f"0x{bb:02x}"
                # Allow for up to 20 items per line
                if ctr >= 20:
                    ctr = 0
                    ret = "\n" + ret
                ctr += 1
                return ret

            print(", ".join(map(formatter, json_bytes)))
            print("};")
        print("} // namespace json_tests")
    else:
        print(json.dumps(packs_vector, indent=2))


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: generate_libauth_test_vectors.py [--encode [--header-only]] [json_test_vector_file, ...]")
        sys.exit(1)

    main()
