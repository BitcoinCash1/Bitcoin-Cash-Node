#pragma once
/**
 * Chain params constants for each tracked chain.
 * @generated by contrib/devtools/chainparams/generate_chainparams_constants.py
 */

#include <primitives/blockhash.h>
#include <uint256.h>

namespace ChainParamsConstants {
    const BlockHash MAINNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000000000000000bd741639a37bbec02aaceac525ae976659ef124678de99");
    const uint256 MAINNET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000235f5b38f28b08e04747e0c");

    const BlockHash TESTNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000005016827cf9792c9113730c0b707c6c0bc5cf1bf88fc4c440bf574648");
    const uint256 TESTNET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000010d7621a5fd7db6976d");

    const BlockHash TESTNET4_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000001a9f085e9a25d13373b4cafa9ac3daf1ca24f360add13e49c8118d8f");
    const uint256 TESTNET4_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000715f277c850b86e");

    // Scalenet re-organizes above height 10,000 - use block 9,999 hash here.
    const BlockHash SCALENET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000007fb3362740efd1435aa414f54171993483799782f83c61bc7bf1b1be");
    const uint256 SCALENET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000000003a54dce8032552f");

    const BlockHash CHIPNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000002405dc87a8dcdd3488d054ee2e5621e86cca961b22e5802fb94f399c");
    const uint256 CHIPNET_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000165d2c884357355");
} // namespace ChainParamsConstants
