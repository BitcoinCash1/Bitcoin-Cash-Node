#pragma once
/**
 * Chain params constants for each tracked chain.
 * @generated by contrib/devtools/chainparams/generate_chainparams_constants.py
 */

#include <primitives/blockhash.h>
#include <uint256.h>

namespace ChainParamsConstants {
    const BlockHash MAINNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000000000000000d680d0fe34e4dd4446efdb78cff40ebbde6703709f17df");
    const uint256 MAINNET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000213bd5f21e666b57af9d26b");

    const BlockHash TESTNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000005f098c543e1b0fceede28b1e8d55a4673f4ec14bfe4181cb279a931b");
    const uint256 TESTNET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000010c9369b9bb65c9b68d");

    const BlockHash TESTNET4_DEFAULT_ASSUME_VALID = BlockHash::fromHex("0000000001ac4879b3668ecd793aed5ad867f2de413699dceed5994f5a9cc434");
    const uint256 TESTNET4_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000713a81f32e2ccdd");

    // Scalenet re-organizes above height 10,000 - use block 9,999 hash here.
    const BlockHash SCALENET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000007fb3362740efd1435aa414f54171993483799782f83c61bc7bf1b1be");
    const uint256 SCALENET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000000003a54dce8032552f");

    const BlockHash CHIPNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("0000000056c498ff5678db6b52c2f77f68f6f88a1560af84587d9d54e1a61b1a");
    const uint256 CHIPNET_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000164e8826273d789");
} // namespace ChainParamsConstants
