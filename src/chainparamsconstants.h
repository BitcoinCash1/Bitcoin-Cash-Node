#pragma once
/**
 * Chain params constants for each tracked chain.
 * @generated by contrib/devtools/chainparams/generate_chainparams_constants.py
 */

#include <primitives/blockhash.h>
#include <uint256.h>

namespace ChainParamsConstants {
    const BlockHash MAINNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("00000000000000000258199818ffa631de11428d4af1a784b532f34746672c35");
    const uint256 MAINNET_MINIMUM_CHAIN_WORK = uint256S("000000000000000000000000000000000000000001964fcd62c5f13a5480f5dd");

    const BlockHash TESTNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000003d52c604371db437a15afec34d44f0c3378c8386d3a53eb8b90d50bc");
    const uint256 TESTNET_MINIMUM_CHAIN_WORK = uint256S("000000000000000000000000000000000000000000000088db7577862ffa1b99");

    const BlockHash TESTNET4_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000003bc3f3eb2f6639b90d6b99e16d964edebb518cca092d4b03e7715d56");
    const uint256 TESTNET4_MINIMUM_CHAIN_WORK = uint256S("000000000000000000000000000000000000000000000000015f9325ce0badee");

    // Scalenet re-organizes above height 10,000 - use block 9,999 hash here.
    const BlockHash SCALENET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000007fb3362740efd1435aa414f54171993483799782f83c61bc7bf1b1be");
    const uint256 SCALENET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000000003a54dce8032552f");

    const BlockHash CHIPNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("00000000f053c918cf174ebcdc0b886e2315f3f0337a8ce0fcc42eb4ce403fe5");
    const uint256 CHIPNET_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000161bec9fb1873fa");
} // namespace ChainParamsConstants
