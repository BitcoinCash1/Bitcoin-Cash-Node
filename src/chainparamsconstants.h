#pragma once
/**
 * Chain params constants for each tracked chain.
 * @generated by contrib/devtools/chainparams/generate_chainparams_constants.py
 */

#include <primitives/blockhash.h>
#include <uint256.h>

namespace ChainParamsConstants {
    const BlockHash MAINNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000000000000000982e811b14b1fe425553fc1b437a34caddea0d70ec6508");
    const uint256 MAINNET_MINIMUM_CHAIN_WORK = uint256S("000000000000000000000000000000000000000002405c7742f79fa46c9328fc");

    const BlockHash TESTNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("00000000000033b3389f8cca18b9c14403df5cf37b8d40976b0c4cc3347afb74");
    const uint256 TESTNET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000010ef9f6bb0c259c9bbd");

    const BlockHash TESTNET4_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000002186572a871cd2b0f02a3e4fd8f2f2006664e62fec6938be1c2668e0");
    const uint256 TESTNET4_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000872d0d2e29f07f2");

    // Scalenet re-organizes above height 10,000 - use block 9,999 hash here.
    const BlockHash SCALENET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000007fb3362740efd1435aa414f54171993483799782f83c61bc7bf1b1be");
    const uint256 SCALENET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000000003a54dce8032552f");

    const BlockHash CHIPNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("0000000012d6a9f6060b2956cf8ad9766548c0c34aebd66a36ae759df80c16b9");
    const uint256 CHIPNET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000000001661dd80e5b5e00");
} // namespace ChainParamsConstants
