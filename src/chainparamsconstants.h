#pragma once
/**
 * Chain params constants for each tracked chain.
 * @generated by contrib/devtools/chainparams/generate_chainparams_constants.py
 */

#include <primitives/blockhash.h>
#include <uint256.h>

namespace ChainParamsConstants {
    const BlockHash MAINNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("0000000000000000011f935eda516c1eb358f17f5d65f1f6e81b8154c59daa22");
    const uint256 MAINNET_MINIMUM_CHAIN_WORK = uint256S("000000000000000000000000000000000000000001abe477b568bad240cb4051");

    const BlockHash TESTNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("00000000000001e7cbbfd1d776d898eb4bf3a874eb76cfc8f4a939a368e55520");
    const uint256 TESTNET_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000a111e981d967ce652c");

    const BlockHash TESTNET4_DEFAULT_ASSUME_VALID = BlockHash::fromHex("0000000003e34bffd0451bfbd56e9bb997c20d56bbd2b42814a23fd5c40df6b6");
    const uint256 TESTNET4_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000000001b54f1c8eaef5ba");

    // Scalenet re-organizes above height 10,000 - use block 9,999 hash here.
    const BlockHash SCALENET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000007fb3362740efd1435aa414f54171993483799782f83c61bc7bf1b1be");
    const uint256 SCALENET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000000003a54dce8032552f");

    const BlockHash CHIPNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000005c3b095538a554fc83d2aac62d3ea9227848e471d86c90fb2dbdf7c0");
    const uint256 CHIPNET_MINIMUM_CHAIN_WORK = uint256S("000000000000000000000000000000000000000000000000016286d40c7eecbe");
} // namespace ChainParamsConstants
